=== meta

version: 0.1.0
description: FIXME

=== tree

- docs/
- scripts/
- src/
-- {%name%}.c
- tests/
- README.md
- Makefile

=== Makefile
#==============================================================================
CC      = gcc
LD      = gcc
CFLAGS  = -O2 -Wall -Wextra
CFLAGS += -Wno-unused-parameter -Wno-unused-function -Wno-unused-result
LIBS    = `pkg-config --cflags --libs glib-2.0`
INCLDS  = -I $(INC_DIR)
#------------------------------------------------------------------------------
BIN_DIR = bin
BLD_DIR = build
INC_DIR = includes
OUT_DIR = out
SRC_DIR = src
TST_DIR = tests
UTI_DIR = scripts
#------------------------------------------------------------------------------
TRASH   = $(BIN_DIR) $(BLD_DIR) $(OUT_DIR)
#------------------------------------------------------------------------------
SRC     = $(wildcard $(SRC_DIR)/*.c)
OBJS    = $(patsubst $(SRC_DIR)/%.c,$(BLD_DIR)/%.o,$(SRC))
#------------------------------------------------------------------------------
PROGRAM = {%name%}
#==============================================================================

vpath %.c $(SRC_DIR)

.DEFAULT_GOAL = build

.PHONY: build setup clean debug fmt test run

$(BLD_DIR)/%.o: %.c
	$(CC) -c $(INCLDS) $(CFLAGS) $(LIBS) $< -o $@

$(BIN_DIR)/$(PROGRAM): $(OBJS)
	$(CC) $(INCLDS) $(LIBS) $(OBJS) -o $@

build: setup $(BIN_DIR)/$(PROGRAM)

run: build
	./$(BIN_DIR)/$(PROGRAM) coiso keyword keword2 keyword3

fmt:
	@echo "C and Headers files:"
	@-clang-format -verbose -i $(SRC_DIR)/*.c $(INC_DIR)/*.h
	@echo ""
	@echo "Shell files:"
	@shfmt -l -w -i 2 .

debug: CFLAGS = -Wall -Wextra -ansi -pedantic -O0 -g
debug: build
	gdb ./$(BIN_DIR)/$(PROGRAM)

test:
	@echo "Write some tests!"

setup:
	@mkdir -p $(BIN_DIR)
	@mkdir -p $(BLD_DIR)
	@mkdir -p $(OUT_DIR)

clean:
	@echo "Cleaning..."
	@echo ""
	@-rm -rf $(TRASH)
	@echo ""
	@echo "...✓ done!"

=== src/{%name%}.c
#include <argp.h>
#include <error.h>
#include <stdlib.h>

const char *argp_program_version = "{%name%} {%version%}";
const char *argp_program_bug_address = "{%email%}";

/* Program documentation. */
static char doc[] = "{%name%} {%description%}";

/* A description of the arguments we accept. */
static char args_doc[] = "ARG1 [STRING...]";

/* Keys for options without short-options. */
#define OPT_ABORT 1 /* –abort */

/* The options we understand. */
static struct argp_option options[] = {
    {"verbose", 'v', 0, 0, "Produce verbose output", 0},
    {"quiet", 'q', 0, 0, "Don't produce any output", 0},
    {"silent", 's', 0, OPTION_ALIAS, 0, 0},
    {"output", 'o', "FILE", 0, "Output to FILE instead of standard output", 0},
    {0}};

/* Used by main to communicate with parse_opt. */
struct arguments {
    char *arg1;                 /* arg1 */
    char **strings;             /* [string…] */
    int silent, verbose, abort; /* ‘-s’, ‘-v’, ‘--abort’ */
    char *output_file;          /* file arg to ‘--output’ */
};

/* Parse a single option. */
static error_t parse_opt(int key, char *arg, struct argp_state *state) {
    struct arguments *arguments = state->input;

    switch (key) {
        case 'q':
        case 's':
            arguments->silent = 1;
            break;
        case 'v':
            arguments->verbose = 1;
            break;
        case 'o':
            arguments->output_file = arg;
            break;
        case OPT_ABORT:
            arguments->abort = 1;
            break;

        case ARGP_KEY_NO_ARGS:
            argp_usage(state);
            break;

        case ARGP_KEY_ARG:
            /* Here we know that state->arg_num == 0, since we
               force argument parsing to end before any more arguments can
               get here. */
            arguments->arg1 = arg;
            arguments->strings = &state->argv[state->next];
            state->next = state->argc;
            break;

        default:
            return ARGP_ERR_UNKNOWN;
    }

    return 0;
}

/* Our argp parser. */
static struct argp argp = {options, parse_opt, args_doc, doc, NULL, NULL, NULL};

int main(int argc, char **argv) {
    struct arguments arguments;

    /* Default values. */
    arguments.silent = 0;
    arguments.verbose = 0;
    arguments.output_file = "/tmp/file.tmp";
    arguments.abort = 0;

    argp_parse(&argp, argc, argv, 0, 0, &arguments);

    if (arguments.abort) error(10, 0, "ABORTED");

    printf("ARG1 = %s\n", arguments.arg1);

    printf("STRINGS = ");
    for (int j = 0; arguments.strings[j]; j++)
        printf(j == 0 ? "%s" : ", %s", arguments.strings[j]);
    printf("\n");

    printf("OUTPUT_FILE = %s\nVERBOSE = %s\nSILENT = %s\n",
               arguments.output_file, arguments.verbose ? "yes" : "no",
               arguments.silent ? "yes" : "no");

    return 0;
}

=== README.md
# {%name%}

## Getting Started

These instructions will get you a copy of the project up and running on your
local machine for development and testing purposes.

### Prerequisites

The following software is required to be installed on your system:

- [make](https://www.gnu.org/software/make/)
- [gcc](https://gcc.gnu.org/releases.html)

### Development

Compile the program.

```
make build
```

Run the program.

```
make run
```

Test your code.

```
make test
```

Run in debug mode.

```
make debug
```

Format your code.

```
make fmt
```

## Author

Comments and bug reports to {%author%}, {%email%}.
